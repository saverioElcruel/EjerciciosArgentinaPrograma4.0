A continuación, se deben realizar las siguientes consultas 
sobre la base de datos:

Error Code: 1064. You have an error in your SQL syntax; 
check the manual that corresponds to your MySQL server 
version for the right syntax to use near 'PAR' at line 1


Consultas sobre una tabla
1. Devuelve un listado con el código de oficina y 
la ciudad donde hay oficinas.

SELECT codigo_oficina, ciudad
FROM oficina
GROUP BY ciudad;

2. Devuelve un listado con la ciudad y el teléfono de las oficinas de España.

SELECT ciudad,telefono
FROM oficina
WHERE pais = "España"
;

3. Devuelve un listado con el nombre, apellidos y email de los empleados cuyo jefe tiene un
código de jefe igual a 7.
SELECT nombre,apellido1,apellido2,email
FROM empleado
WHERE codigo_jefe = 7
;

4. Devuelve el nombre del puesto, nombre, apellidos y email del jefe de la empresa.
SELECT puesto,nombre,apellido1,apellido2,email
FROM empleado
WHERE puesto LIKE "Director G%"
;

5. Devuelve un listado con el nombre, apellidos y puesto de aquellos empleados que no sean
representantes de ventas.
SELECT nombre,apellido1,apellido2,puesto
FROM empleado
WHERE puesto NOT LIKE "Representante V%"
;

6. Devuelve un listado con el nombre de los todos los clientes españoles.
SELECT nombre_cliente,ciudad,pais
FROM cliente
WHERE pais = "Spain"
;

7. Devuelve un listado con los distintos estados por los que puede pasar un pedido.
SELECT DISTINCT estado
FROM pedido
;

8. Devuelve un listado con el código de cliente de aquellos clientes que realizaron algún pago
en 2008. Tenga en cuenta que deberá eliminar aquellos códigos de cliente que aparezcan
repetidos. Resuelva la consulta:
o Utilizando la función YEAR de MySQL.
o Utilizando la función DATE_FORMAT de MySQL.
o Sin utilizar ninguna de las funciones anteriores.

SELECT DISTINCT cliente.codigo_cliente
FROM cliente
INNER JOIN pago
ON cliente.codigo_cliente = pago.codigo_cliente 
WHERE (SELECT DATE_FORMAT(pago.fecha_pago, "%Y")) = 2008
;

9. Devuelve un listado con el código de pedido, código de cliente, fecha esperada y fecha de
entrega de los pedidos que no han sido entregados a tiempo.
SELECT pedido.codigo_pedido, cliente.codigo_cliente, 
pedido.fecha_esperada, pedido.fecha_entrega
FROM pedido
INNER JOIN cliente
ON pedido.codigo_cliente = cliente.codigo_cliente 
WHERE pedido.fecha_esperada < pedido.fecha_entrega
;

10. Devuelve un listado con el código de pedido, código de cliente, fecha esperada y fecha de
entrega de los pedidos cuya fecha de entrega ha sido al menos dos días antes de la fecha
esperada.
o Utilizando la función ADDDATE de MySQL.
o Utilizando la función DATEDIFF de MySQL.
SELECT pedido.codigo_pedido, cliente.codigo_cliente, pedido.fecha_esperada, pedido.fecha_entrega
FROM pedido
INNER JOIN cliente
ON pedido.codigo_cliente = cliente.codigo_cliente 
WHERE pedido.fecha_esperada - pedido.fecha_entrega > 2
;
SELECT pedido.codigo_pedido, cliente.codigo_cliente, pedido.fecha_esperada, pedido.fecha_entrega
FROM pedido
INNER JOIN cliente
ON pedido.codigo_cliente = cliente.codigo_cliente 
WHERE datediff(pedido.fecha_esperada , pedido.fecha_entrega )> 2
;


11. Devuelve un listado de todos los pedidos que fueron rechazados en 2009.
SELECT pedido.codigo_pedido,pedido.fecha_pedido
FROM pedido
WHERE estado = "rechazado" AND date_format(pedido.fecha_pedido,"%Y")=2009
;

12. Devuelve un listado de todos los pedidos que han sido entregados en el mes de enero de
cualquier año.
SELECT pedido.codigo_pedido,pedido.fecha_pedido,pedido.estado
FROM pedido
WHERE estado = "entregado" AND date_format(pedido.fecha_pedido,"%M")="January"
;
13. Devuelve un listado con todos los pagos que se realizaron en el año 2008 mediante Paypal.
Ordene el resultado de mayor a menor.
SELECT id_transaccion,forma_pago
FROM pago
WHERE date_format(fecha_pago, "%Y")="2008"
order by fecha_pago
desc
;
14. Devuelve un listado con todas las formas de pago que aparecen en la tabla pago. Tenga en
cuenta que no deben aparecer formas de pago repetidas.
SELECT DISTINCT forma_pago
FROM pago
;
15. Devuelve un listado con todos los productos que pertenecen a la gama Ornamentales y que
tienen más de 100 unidades en stock. El listado deberá estar ordenado por su precio de
venta, mostrando en primer lugar los de mayor precio.
SELECT nombre,precio_venta
FROM producto
WHERE gama = "Ornamentales" AND cantidad_en_stock > 100
ORDER BY precio_venta
DESC
;

16. Devuelve un listado con todos los clientes que sean de la ciudad de Madrid y cuyo
representante de ventas tenga el código de empleado 11 o 30.
SELECT cliente.nombre_cliente,cliente.codigo_empleado_rep_ventas
FROM cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
WHERE cliente.ciudad = "Madrid" AND cliente.codigo_empleado_rep_ventas IN (11,30)
;

Consultas multitabla (Composición interna)
Las consultas se deben resolver con INNER JOIN.

1. Obtén un listado con el nombre de cada cliente y el nombre y 
apellido de su representante de ventas.
SELECT cliente.nombre_cliente,empleado.nombre,empleado.apellido1
FROM cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
;

2. Muestra el nombre de los clientes que hayan realizado pagos junto 
con el nombre de sus representantes de ventas.

SELECT cliente.nombre_cliente,empleado.nombre,empleado.apellido1
FROM cliente
INNER JOIN pago
ON cliente.codigo_cliente = pago.codigo_cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
WHERE pago.id_transaccion is not null
AND empleado.puesto = "Representante Ventas"
;

3. Muestra el nombre de los clientes que no hayan realizado pagos 
junto con el nombre de sus representantes de ventas.
SELECT cliente.nombre_cliente,empleado.nombre,empleado.apellido1
FROM cliente
LEFT JOIN pago
ON cliente.codigo_cliente = pago.codigo_cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
WHERE pago.id_transaccion is null
AND empleado.puesto = "Representante Ventas"
;


4. Devuelve el nombre de los clientes que han hecho pagos y el nombre 
de sus representantes junto con la ciudad de la oficina a la que 
pertenece el representante.
SELECT DISTINCT cliente.nombre_cliente, empleado.nombre,empleado.apellido1,empleado.puesto,oficina.ciudad
FROM cliente
LEFT JOIN pago
ON cliente.codigo_cliente = pago.codigo_cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
INNER JOIN oficina
ON empleado.codigo_oficina = oficina.codigo_oficina
WHERE pago.id_transaccion is not null
AND empleado.puesto = "Representante Ventas"
;

6. Lista la dirección de las oficinas que tengan clientes en Fuenlabrada.
SELECT DISTINCT oficina.linea_direccion1
FROM cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
INNER JOIN oficina
ON empleado.codigo_oficina = oficina.codigo_oficina
WHERE cliente.ciudad = "Fuenlabrada"
;

7. Devuelve el nombre de los clientes y el nombre de sus representantes
junto con la ciudad de la oficina a la que pertenece el representante.
SELECT DISTINCT cliente.nombre_cliente,empleado.nombre,oficina.ciudad
FROM cliente
INNER JOIN empleado
ON cliente.codigo_empleado_rep_ventas = empleado.codigo_empleado
INNER JOIN oficina
ON empleado.codigo_oficina = oficina.codigo_oficina
;

8. Devuelve un listado con el nombre de los empleados junto con el nombre de sus jefes.

SELECT e2.nombre empleado, e1.nombre jefe, e1.apellido1
FROM empleado AS e1
INNER JOIN empleado AS e2
ON e1.codigo_empleado =  e2.codigo_jefe
;

9. Devuelve el nombre de los clientes a los que no se les ha entregado a tiempo un pedido.

SELECT cliente.nombre_cliente, count(cliente.nombre_cliente)
FROM cliente
INNER JOIN pedido
ON cliente.codigo_cliente =  pedido.codigo_cliente
WHERE pedido.fecha_entrega > pedido.fecha_esperada
group by cliente.nombre_cliente
order by count(cliente.nombre_cliente)
DESC
;

10. Devuelve un listado de las diferentes gamas de producto que ha comprado cada cliente.
SELECT DISTINCT cliente.nombre_cliente,producto.gama
FROM cliente
INNER JOIN pedido
ON cliente.codigo_cliente =  pedido.codigo_cliente
INNER JOIN detalle_pedido
ON pedido.codigo_pedido = detalle_pedido.codigo_pedido
INNER JOIN producto
ON detalle_pedido.codigo_producto = producto.codigo_producto
;

Consultas multitabla (Composición externa)
Resuelva todas las consultas utilizando las cláusulas LEFT JOIN, RIGHT JOIN, JOIN.

1. Devuelve un listado que muestre solamente los clientes que no han realizado ningún pago.

SELECT DISTINCT cliente.nombre_cliente
FROM cliente
LEFT JOIN pago
ON cliente.codigo_cliente =  pago.codigo_cliente
WHERE pago.codigo_cliente is null
;

2. Devuelve un listado que muestre solamente los clientes que no han realizado ningún
pedido.
SELECT DISTINCT cliente.nombre_cliente
FROM cliente
LEFT JOIN pedido
ON cliente.codigo_cliente =  pedido.codigo_cliente
WHERE pedido.codigo_cliente is null
;




3. Devuelve un listado que muestre los clientes que no han realizado ningún pago y los que
no han realizado ningún pedido.

SELECT DISTINCT nombre_cliente clienteNoPago , (SELECT DISTINCT cliente.nombre_cliente
FROM cliente
LEFT JOIN pago
ON cliente.codigo_cliente =  pago.codigo_cliente
WHERE pago.codigo_cliente is null)
FROM cliente
LEFT JOIN pedido
ON cliente.codigo_cliente =  pedido.codigo_cliente
WHERE pedido.codigo_cliente is null
;
Error Code: 1242. Subquery returns more than 1 row


4. Devuelve un listado que muestre solamente los empleados que no tienen una oficina
asociada.

SELECT empleado.nombre, empleado.codigo_oficina
FROM empleado
LEFT JOIN oficina
ON oficina.codigo_oficina = empleado.codigo_oficina
WHERE empleado.codigo_oficina is null
;


5. Devuelve un listado que muestre solamente los empleados que no tienen un cliente
asociado.

6. Devuelve un listado que muestre los empleados que no tienen una oficina asociada y los
que no tienen un cliente asociado.

7. Devuelve un listado de los productos que nunca han aparecido en un pedido.
SELECT DISTINCT producto.nombre
FROM producto
LEFT JOIN detalle_pedido
ON producto.codigo_producto = detalle_pedido.codigo_producto
WHERE detalle_pedido.codigo_producto is null
;

8. Devuelve las oficinas donde no trabajan ninguno de los empleados que hayan sido los
representantes de ventas de algún cliente que haya realizado la compra de algún producto
de la gama Frutales.

9. Devuelve un listado con los clientes que han realizado algún pedido, pero no han realizado
ningún pago.
10. Devuelve un listado con los datos de los empleados que no tienen clientes asociados y el
nombre de su jefe asociado.